using System;
using System.Drawing;
using System.Drawing.Drawing2D;

namespace SchetsEditor
{
    public interface ISchetsTool
    {
        void MuisVast(SchetsControl s, Point p);
        void MuisDrag(SchetsControl s, Point p);
        void MuisLos(SchetsControl s, Point p);
        void Letter(SchetsControl s, char c);
    }

    public abstract class StartpuntTool : ISchetsTool
    {
        protected Point startpunt;
        protected Brush kwast;

        public virtual void MuisVast(SchetsControl s, Point p)
        {
            startpunt = p;
        }
        public virtual void MuisLos(SchetsControl s, Point p)
        {
            kwast = new SolidBrush(s.PenKleur);
        }
        public abstract void MuisDrag(SchetsControl s, Point p);
        public abstract void Letter(SchetsControl s, char c);
    }

    public class TekstTool : StartpuntTool
    {
        public override string ToString() { return "tekst"; }

        public override void MuisDrag(SchetsControl s, Point p) { }

        public override void Letter(SchetsControl s, char c)
        {
            if (c >= 32)
            {
                Graphics gr = s.MaakBitmapGraphics();
                Font font = new Font("Tahoma", 40);
                string tekst = c.ToString();
                SizeF sz =
                gr.MeasureString(tekst, font, this.startpunt, StringFormat.GenericTypographic);
                gr.DrawString(tekst, font, kwast,
                                              this.startpunt, StringFormat.GenericTypographic);
                // gr.DrawRectangle(Pens.Black, startpunt.X, startpunt.Y, sz.Width, sz.Height);
                startpunt.X += (int)sz.Width;
                s.Invalidate();
            }
        }
    }

    public abstract class TweepuntTool : StartpuntTool
    {
        public static Rectangle Punten2Rechthoek(Point p1, Point p2)
        {
            return new Rectangle(new Point(Math.Min(p1.X, p2.X), Math.Min(p1.Y, p2.Y))
                                , new Size(Math.Abs(p1.X - p2.X), Math.Abs(p1.Y - p2.Y))
                                );
        }
        public static Pen MaakPen(Brush b, int dikte)
        {
            Pen pen = new Pen(b, dikte);
            pen.StartCap = LineCap.Round;
            pen.EndCap = LineCap.Round;
            return pen;
        }
        public override void MuisVast(SchetsControl s, Point p)
        {
            base.MuisVast(s, p);
            kwast = Brushes.Gray;
        }
        public override void MuisDrag(SchetsControl s, Point p)
        {
            s.Refresh();
            this.Bezig(s.CreateGraphics(), this.startpunt, p);
        }
        public override void MuisLos(SchetsControl s, Point p)
        {
            base.MuisLos(s, p);
            this.Compleet(s, s.MaakBitmapGraphics(), this.startpunt, p);
            s.Invalidate();
        }
        public override void Letter(SchetsControl s, char c)
        {
        }
        public abstract void Bezig(Graphics g, Point p1, Point p2);

        public virtual void Compleet(SchetsControl s, Graphics g, Point p1, Point p2)
        {
            //s.Schets.element.Add();
            this.Bezig(g, p1, p2);
        }
    }

    public class RechthoekTool : TweepuntTool
    {
        public override string ToString() { return "kader"; }

        public override void Bezig(Graphics g, Point p1, Point p2)
        {
            g.DrawRectangle(MaakPen(kwast, 3), TweepuntTool.Punten2Rechthoek(p1, p2));
            // ik denk dat deze moet verplaatst worden naar de Element Klasse
            // ik 

        }
        public override void Compleet(SchetsControl s, Graphics g, Point p1, Point p2)
        {

            RechthoekTool l = new RechthoekTool();
            Element k = new Element(l, p1, p2, kwast, true);
            s.Schets.elements_list.Add(k);
            this.Bezig(g, p1, p2);
            /*
            foreach (Element elem in s.Schets.elements_list)
            {
                if (elem.tool.GetType() == typeof(RechthoekTool))
                {
                    if (elem.tool.GetType() != typeof(VolRechthoekTool))
                    {
                        if (elem.tekenen == true)
                        {
                            g.DrawRectangle(MaakPen(elem.kleur, 3), TweepuntTool.Punten2Rechthoek(elem.p1, elem.p2));
                        }
                    }
                }
            }
            s.Invalidate();*/
        }
    }

    public class VolRechthoekTool : RechthoekTool
    {
        //public bool volrechthoek;
        public override string ToString() { return "vlak"; }

        public override void Compleet(SchetsControl s, Graphics g, Point p1, Point p2)
        {
            VolRechthoekTool l = new VolRechthoekTool();
            Element k = new Element(l, p1, p2, kwast, true);
            s.Schets.elements_list.Add(k);
            /*
            foreach (Element elem in s.Schets.elements_list)
            {
                if (elem.tool.GetType() == typeof(VolRechthoekTool))
                {
                    g.FillRectangle(elem.kleur, TweepuntTool.Punten2Rechthoek(elem.p1, elem.p2)) ;
                }
            }
            s.Invalidate();*/
            //Element.teken(this, g, p1, p2);
            g.FillRectangle(kwast, TweepuntTool.Punten2Rechthoek(p1, p2));

        }
    }

    public class LijnTool : TweepuntTool
    {
        public override string ToString() { return "lijn"; }

        public override void Bezig(Graphics g, Point p1, Point p2)
        {
            g.DrawLine(MaakPen(this.kwast, 3), p1, p2);
        }
        public override void Compleet(SchetsControl s, Graphics g, Point p1, Point p2)
        {
            //brush is kwast
            LijnTool l = new LijnTool();
            Element k = new Element(l, p1, p2, kwast, true);
            s.Schets.elements_list.Add(k);
            /*
            foreach (Element elem in s.Schets.elements_list)
            {
                if (elem.tool.GetType() == typeof(LijnTool))
                {
                    if (elem.tool.GetType() != typeof(PenTool))
                    {
                        g.DrawLine(MaakPen(elem.kleur, 3), elem.p1, elem.p2);
                    }
                }
            }
            s.Invalidate();*/

            this.Bezig(g, p1, p2);
        }
    }

    public class PenTool : LijnTool
    {
        public override string ToString() { return "pen"; }

        public override void MuisDrag(SchetsControl s, Point p)
        {
            this.MuisLos(s, p);
            this.MuisVast(s, p);
        }
        public override void Compleet(SchetsControl s, Graphics g, Point p1, Point p2)
        {

            PenTool l = new PenTool();
            Element k = new Element(l, p1, p2, kwast, true);
            s.Schets.elements_list.Add(k);
            /*
            foreach (Element elem in s.Schets.elements_list)
            {
                if (elem.tool.GetType() == typeof(PenTool))
                {
                    g.DrawLine(MaakPen(elem.kleur, 3), elem.p1, elem.p2);
                }
            }
            s.Invalidate();*/
            this.Bezig(g, p1, p2);
        }

    }

    public class GumTool : TweepuntTool
    {
        public override string ToString() { return "gum"; }

        public override void Bezig(Graphics g, Point p1, Point p2)
        {
            //g.DrawLine(MaakPen(Brushes.White, 7), p1, p2);
        }
        public override void Compleet(SchetsControl s, Graphics g, Point p1, Point p2)
        {
            EventArgs ea = new EventArgs();
            s.Schoon(this, ea);
            foreach (Element elem in s.Schets.elements_list)
            {

                if (elem.tool.GetType() == typeof(RechthoekTool))
                {
                    Rectangle test = new Rectangle();
                    test = Punten2Rechthoek(elem.p1, elem.p2);
                    if (test.Contains(p2))
                    {
                        elem.tekenen = false;
                        //RechthoekTool.Compleet(s,g, elem.p1, elem.p2);
                        //s.Schets.elements_list.RemoveAt(elem);
                    }
                    if (elem.tekenen == true)
                        elem.teken(this, g, elem.p1, elem.p2);


                }

                if (elem.tool.GetType() == typeof(VolRechthoekTool))
                {
                    Rectangle test = new Rectangle();
                    test = Punten2Rechthoek(elem.p1, elem.p2);
                    if (test.Contains(p2))
                    {
                        elem.tekenen = false;
                        //RechthoekTool.Compleet(s,g, elem.p1, elem.p2);
                        //s.Schets.elements_list.RemoveAt(elem);
                    }
                    if (elem.tekenen == true)
                        elem.teken(this, g, elem.p1, elem.p2);


                }
                //g.DrawLine(MaakPen(elem.kleur, 3), elem.p1, elem.p2);

                if (elem.tool.GetType() == typeof(LijnTool))
                {
                    Rectangle test = new Rectangle();
                    test = Punten2Rechthoek(elem.p1, elem.p2);
                    if (test.Contains(p2))
                    {
                        elem.tekenen = false;
                        //RechthoekTool.Compleet(s,g, elem.p1, elem.p2);
                        //s.Schets.elements_list.RemoveAt(elem);
                    }
                    if (elem.tekenen == true)
                        elem.teken(this, g, elem.p1, elem.p2);


                }

                if (elem.tool.GetType() == typeof(PenTool))
                {
                    Rectangle test = new Rectangle();
                    test = Punten2Rechthoek(elem.p1, elem.p2);
                    if (test.Contains(p2))
                    {
                        elem.tekenen = false;
                        //RechthoekTool.Compleet(s,g, elem.p1, elem.p2);
                        //s.Schets.elements_list.RemoveAt(elem);
                    }
                    if (elem.tekenen == true)
                        elem.teken(this, g, elem.p1, elem.p2);


                }
            }
            s.Invalidate();
            //base.Compleet(s, g, p1, p2);
        }
    }
    /*
    public class GumTool : PenTool
    {
        public override string ToString() { return "gum"; }
        public override void Bezig(Graphics g, Point p1, Point p2)
        {
            g.DrawLine(MaakPen(Brushes.White, 7), p1, p2);
        }
    }*/

}
